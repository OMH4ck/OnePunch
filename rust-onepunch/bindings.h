#ifndef RUST_ONEPUNCH_H
#define RUST_ONEPUNCH_H

/* Generated with cbindgen:0.24.5 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum RustOpcode {
  RUST_OPCODE_OP_NONE = 0,
  RUST_OPCODE_OP_MOV,
  RUST_OPCODE_OP_LEA,
  RUST_OPCODE_OP_POP,
  RUST_OPCODE_OP_ADD,
  RUST_OPCODE_OP_SUB,
  RUST_OPCODE_OP_IMUL,
  RUST_OPCODE_OP_MUL,
  RUST_OPCODE_OP_DIV,
  RUST_OPCODE_OP_PUSH,
  RUST_OPCODE_OP_XOR,
  RUST_OPCODE_OP_OR,
  RUST_OPCODE_OP_AND,
  RUST_OPCODE_OP_SHR,
  RUST_OPCODE_OP_SHL,
  RUST_OPCODE_OP_ROR,
  RUST_OPCODE_OP_SAR,
  RUST_OPCODE_OP_TEST,
  RUST_OPCODE_OP_NOP,
  RUST_OPCODE_OP_CMP,
  RUST_OPCODE_OP_CALL,
  RUST_OPCODE_OP_JMP,
  RUST_OPCODE_OP_XCHG,
  RUST_OPCODE_OP_JCC,
  RUST_OPCODE_OP_RET,
  RUST_OPCODE_OP_SYSCALL,
  RUST_OPCODE_OP_INT3,
  RUST_OPCODE_OP_SFENCE,
  RUST_OPCODE_OP_BSWAP,
  RUST_OPCODE_OP_MOVAPS,
  RUST_OPCODE_OP_MOVDQA,
  RUST_OPCODE_OP_MOVNTDQ,
  RUST_OPCODE_OP_MOVSXD,
} RustOpcode;

typedef enum RustOperationLength {
  RUST_OPERATION_LENGTH_NONE = 0,
  RUST_OPERATION_LENGTH_BYTE = 1,
  RUST_OPERATION_LENGTH_WORD = 2,
  RUST_OPERATION_LENGTH_DWORD = 4,
  RUST_OPERATION_LENGTH_QWORD = 8,
} RustOperationLength;

typedef enum RustReg {
  RUST_REG_REG_NONE = 0,
  RUST_REG_REG64_START,
  RUST_REG_REG_RAX,
  RUST_REG_REG_RCX,
  RUST_REG_REG_RDX,
  RUST_REG_REG_RBX,
  RUST_REG_REG_RSI,
  RUST_REG_REG_RDI,
  RUST_REG_REG_RSP,
  RUST_REG_REG_RBP,
  RUST_REG_REG_R8,
  RUST_REG_REG_R9,
  RUST_REG_REG_R10,
  RUST_REG_REG_R11,
  RUST_REG_REG_R12,
  RUST_REG_REG_R13,
  RUST_REG_REG_R14,
  RUST_REG_REG_R15,
  RUST_REG_REG_RIP,
  RUST_REG_REG64_END,
  RUST_REG_REG32_START,
  RUST_REG_REG_EAX,
  RUST_REG_REG_ECX,
  RUST_REG_REG_EDX,
  RUST_REG_REG_EBX,
  RUST_REG_REG_ESI,
  RUST_REG_REG_EDI,
  RUST_REG_REG_ESP,
  RUST_REG_REG_EBP,
  RUST_REG_REG_R8D,
  RUST_REG_REG_R9D,
  RUST_REG_REG_R10D,
  RUST_REG_REG_R11D,
  RUST_REG_REG_R12D,
  RUST_REG_REG_R13D,
  RUST_REG_REG_R14D,
  RUST_REG_REG_R15D,
  RUST_REG_REG_EIP,
  RUST_REG_REG32_END,
  RUST_REG_REG16_START,
  RUST_REG_REG_AX,
  RUST_REG_REG_CX,
  RUST_REG_REG_DX,
  RUST_REG_REG_BX,
  RUST_REG_REG_SI,
  RUST_REG_REG_DI,
  RUST_REG_REG_SP,
  RUST_REG_REG_BP,
  RUST_REG_REG_R8W,
  RUST_REG_REG_R9W,
  RUST_REG_REG_R10W,
  RUST_REG_REG_R11W,
  RUST_REG_REG_R12W,
  RUST_REG_REG_R13W,
  RUST_REG_REG_R14W,
  RUST_REG_REG_R15W,
  RUST_REG_REG_IP,
  RUST_REG_REG16_END,
  RUST_REG_REG8_START,
  RUST_REG_REG_AL,
  RUST_REG_REG_CL,
  RUST_REG_REG_DL,
  RUST_REG_REG_BL,
  RUST_REG_REG_SIL,
  RUST_REG_REG_DIL,
  RUST_REG_REG_SPL,
  RUST_REG_REG_BPL,
  RUST_REG_REG_R8B,
  RUST_REG_REG_R9B,
  RUST_REG_REG_R10B,
  RUST_REG_REG_R11B,
  RUST_REG_REG_R12B,
  RUST_REG_REG_R13B,
  RUST_REG_REG_R14B,
  RUST_REG_REG_R15B,
  RUST_REG_REG8_END,
  RUST_REG_REG8H_START,
  RUST_REG_REG_AH,
  RUST_REG_REG_CH,
  RUST_REG_REG_DH,
  RUST_REG_REG_BH,
  RUST_REG_REG_SIH,
  RUST_REG_REG_DIH,
  RUST_REG_REG_SPH,
  RUST_REG_REG_BPH,
  RUST_REG_REG_R8H,
  RUST_REG_REG_R9H,
  RUST_REG_REG_R10H,
  RUST_REG_REG_R11H,
  RUST_REG_REG_R12H,
  RUST_REG_REG_R13H,
  RUST_REG_REG_R14H,
  RUST_REG_REG_R15H,
  RUST_REG_REG8H_END,
  RUST_REG_REG_CR4,
  RUST_REG_REG_CR3,
} RustReg;

typedef enum RustRegType {
  RUST_REG_TYPE_REG_NONE = 0,
  RUST_REG_TYPE_REG64_START,
  RUST_REG_TYPE_REG_RAX,
  RUST_REG_TYPE_REG_RCX,
  RUST_REG_TYPE_REG_RDX,
  RUST_REG_TYPE_REG_RBX,
  RUST_REG_TYPE_REG_RSI,
  RUST_REG_TYPE_REG_RDI,
  RUST_REG_TYPE_REG_RSP,
  RUST_REG_TYPE_REG_RBP,
  RUST_REG_TYPE_REG_R8,
  RUST_REG_TYPE_REG_R9,
  RUST_REG_TYPE_REG_R10,
  RUST_REG_TYPE_REG_R11,
  RUST_REG_TYPE_REG_R12,
  RUST_REG_TYPE_REG_R13,
  RUST_REG_TYPE_REG_R14,
  RUST_REG_TYPE_REG_R15,
  RUST_REG_TYPE_REG_RIP,
} RustRegType;

typedef enum RustValueType {
  RUST_VALUE_TYPE_CALL_VALUE = 0,
  RUST_VALUE_TYPE_MEM_VALUE,
  RUST_VALUE_TYPE_CALL_REG_VALUE,
  RUST_VALUE_TYPE_IMM_VALUE,
  RUST_VALUE_TYPE_OTHER_VALUE,
} RustValueType;

typedef struct RustMemory RustMemory;

typedef struct RustOperand RustOperand;

typedef struct RustPreprocessor RustPreprocessor;

typedef struct RustSolver RustSolver;

typedef struct RustValue {
  enum RustValueType value_type;
  long value;
} RustValue;

typedef struct RustRegister {
  enum RustRegType name;
  struct RustMemory *memory;
  long base_offset;
  char *input_src;
  long input_offset;
  unsigned char input_action;
} RustRegister;

typedef struct RustInstruction {
  unsigned long offset;
  enum RustOpcode opcode;
  struct RustOperand *op_src;
  struct RustOperand *op_dst;
  unsigned int operand_num;
  enum RustOperationLength operation_length;
  char *original_inst;
} RustInstruction;

typedef struct RustSegment {
  struct RustInstruction **inst_list_ptr;
  unsigned int inst_list_len;
  unsigned int useful_inst_index;
} RustSegment;

typedef struct RustSymbolicExecutor {
  unsigned char is_rsp_usable;
  unsigned char is_rbp_usable;
} RustSymbolicExecutor;

struct RustValue *rust_value_new(enum RustValueType value_type, long value);

void rust_value_free(struct RustValue *value);

struct RustMemory *rust_memory_new(void);

void rust_memory_free(struct RustMemory *memory);

void rust_memory_increase_ref_count(struct RustMemory *memory);

void rust_memory_decrease_ref_count(struct RustMemory *memory);

unsigned char rust_memory_contain_range(const struct RustMemory *memory, long start, long end);

unsigned char rust_memory_remove_range(struct RustMemory *memory, long start, long end);

void rust_memory_set_content(struct RustMemory *memory, long offset, const struct RustValue *value);

struct RustRegister *rust_register_new(unsigned char alloc_mem);

void rust_register_free(struct RustRegister *register_);

void rust_register_alias(struct RustRegister *register_,
                         const struct RustRegister *other,
                         unsigned char copy_mem);

void rust_register_set_name(struct RustRegister *register_, enum RustRegType name);

enum RustRegType rust_register_get_name(const struct RustRegister *register_);

enum RustOpcode rust_transfer_str_to_op(const char *op_str);

const char *rust_transfer_op_to_str(enum RustOpcode opcode);

enum RustReg rust_get_reg_by_str(const char *reg_str);

const char *rust_get_reg_str_by_reg(enum RustReg reg);

void rust_operand_free(struct RustOperand *operand);

unsigned char rust_operand_is_literal_number(const struct RustOperand *operand);

unsigned char rust_operand_is_reg_operation(const struct RustOperand *operand);

unsigned char rust_operand_contain_reg(const struct RustOperand *operand, enum RustReg reg);

unsigned char rust_operand_is_reg64_operation(const struct RustOperand *operand);

enum RustReg rust_operand_get_reg_op(const struct RustOperand *operand);

struct RustInstruction *rust_instruction_new(unsigned long offset, enum RustOpcode opcode);

void rust_instruction_free(struct RustInstruction *instruction);

unsigned char rust_instruction_is_reg_operation(const struct RustInstruction *instruction);

void rust_instruction_set_operands(struct RustInstruction *instruction,
                                   struct RustOperand *src_operand,
                                   struct RustOperand *dst_operand);

struct RustSegment *rust_segment_new(struct RustInstruction *const *inst_list_ptr,
                                     unsigned int inst_list_len);

void rust_segment_free(struct RustSegment *segment);

void rust_segment_set_useful_inst_index(struct RustSegment *segment, unsigned int idx);

const struct RustInstruction *rust_segment_get_instruction(const struct RustSegment *segment,
                                                           unsigned int index);

const char *rust_transfer_operation_len_to_str(unsigned int dtype);

unsigned long rust_string_hash(const char *input);

unsigned long rust_gen_id(void);

unsigned char rust_is_imm(const char *input);

unsigned int rust_str_split(const char *input,
                            const char *delimiter,
                            char **result_array,
                            unsigned int max_results);

char *rust_str_trim(const char *input);

double rust_get_cur_time(void);

void rust_free_string(char *s);

struct RustSymbolicExecutor *rust_symbolic_executor_new(void);

void rust_symbolic_executor_free(struct RustSymbolicExecutor *executor);

unsigned char rust_symbolic_executor_execute_instructions(struct RustSymbolicExecutor *executor,
                                                          const struct RustSegment *segment,
                                                          struct RustRegister **reg_list_ptr,
                                                          unsigned int reg_list_len,
                                                          unsigned char record_flag);

unsigned char rust_symbolic_executor_is_in_input(enum RustReg reg,
                                                 const struct RustRegister *const *reg_list_ptr,
                                                 unsigned int reg_list_len);

struct RustRegister *rust_symbolic_executor_get_reg_by_idx(enum RustReg reg,
                                                           struct RustRegister **reg_list_ptr,
                                                           unsigned int reg_list_len);

unsigned int rust_symbolic_executor_prepare_reg_list(const enum RustReg *reg_names_ptr,
                                                     unsigned int reg_names_len,
                                                     struct RustRegister **result_ptr,
                                                     unsigned int max_results);

struct RustPreprocessor *rust_preprocessor_new(void);

void rust_preprocessor_free(struct RustPreprocessor *preprocessor);

void rust_preprocessor_process(struct RustPreprocessor *preprocessor,
                               struct RustSegment *const *segments_ptr,
                               unsigned int segments_len);

unsigned long rust_constraint_analyzer_compute_constraint(const struct RustSegment *segment);

unsigned char rust_constraint_analyzer_hash_match(unsigned long needed, unsigned long src);

void rust_solver_free(struct RustSolver *solver);

unsigned long rust_solver_hash_reg_list(const struct RustRegister *const *reg_list_ptr,
                                        unsigned int reg_list_len);

#endif /* RUST_ONEPUNCH_H */
